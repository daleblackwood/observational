/*--------- START TESTS ---------*/

const assert = require("assert");
const { Subject, Dipatcher } = require("./lib");

const INITIAL_VALUE = "inital value";
const SECOND_VALUE = "second value";
const THIRD_VALUE = "third value";
let subject;
let scopeA;
let scopeB;

test("can create Subject", async () => {
  subject = new Subject(INITIAL_VALUE);
  assert(typeof subject === "object", "Subject wasn't an object");
  assert(typeof subject.listen === "function", "Subject had no listen function");
  assert(subject.value === INITIAL_VALUE, "Subject value wasn't inital value");
});

test("can react to Subject", async () => {
  const scope = {};
  let outerValue = "";
  subject.listen(scope, value => outerValue = value);
  assert(outerValue === INITIAL_VALUE, "Subject.value did't affect outerValue");

  subject.setValue(SECOND_VALUE);
  assert(outerValue === SECOND_VALUE, "Subject.setValue didn't set outerValue to " + SECOND_VALUE);
});

test("Subject correctly subscribes", async () => {
  scopeA = { value: "", setValue: x => scopeA.value = x };
  scopeB = { value: "", setValue: x => scopeB.value = x };
  subject = new Subject(INITIAL_VALUE);
  subject.listen(scopeA, scopeA.setValue);
  subject.listen(scopeB, scopeB.setValue);
  assert(scopeA.value === INITIAL_VALUE, "scopeA value wasn't initial value, it was " + scopeA.value);
  assert(scopeB.value === INITIAL_VALUE, "scopeB value wasn't initial value, it was " + scopeB.value);

  subject.setValue(SECOND_VALUE);
  assert(scopeA.value === SECOND_VALUE, "scopeA value isn't second value " + SECOND_VALUE);
  assert(scopeB.value === SECOND_VALUE, "scopeB value isn't second value " + SECOND_VALUE);
});

test("Subject correctly unsubscribes", async () => {
  subject.unlistenAll(scopeA);
  subject.setValue(THIRD_VALUE);
  assert(scopeA.value === SECOND_VALUE, "scopeA value isn't second value: " + SECOND_VALUE);
  assert(scopeB.value === THIRD_VALUE, "scopeB value isn't third value: " + THIRD_VALUE);
})

/*--------- END TESTS ---------*/

/** run tests - generated by http://npmjs.com/tinit */
function test(text, func) { (test.all = test.all || []).push({ i: test.all.length, text, func }); }
(async () => { // autorun
  const log = (msg, c) => process.stdout.write((["\033[32m", "\033[31m"][c] || "") + msg + "\033[0m");
  log("tinit running " + test.all.length + " tests...\n");
  while ((t = test.all.shift())) {
    log(" > " + (t.i + 1) + ". " + t.text + "...");
    try { await t.func(); } catch (e) {
      log("FAIL\n" + (e && e.stack || e) + "\n", 1);
      process.exit(1);
    };
    log("PASS\n", 0);
  }
  process.exit(0);
})();